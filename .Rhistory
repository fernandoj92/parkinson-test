# Execute the kmeans algorithm 11 times (k = 2,3,4,...,12) with the NMS features
for(i in 1:length(kmeans_nms_domains_models)){
kmeans_nms_domains_models[[i]] = kmeans(x = d897_nms_domains9, centers = i+1, iter.max = 30, nstart = 20)
}
#########################################################
### D) Preparing clustered data por single-view analysis
#########################################################
# First we select the columns that interest us for the single-view analysis
# 68:76 -> 9 Non-motor domains in order
# 3:7   -> country, age, sex, pdonset, durat_pd
# 82    -> cisitot
# 33    -> hy
# 81    -> scmtot
filtered_d897_nms_domains = d897[c(68:76, 3:7, 82, 33, 81)]
#Then we create a new list where each of its items is a completed data frame with clusters
filtered_d897_nms_withClusters = vector("list", 11)
# NMS domains: Add its assigned clusters to each data frame's row
for(i in 1:length(filtered_d897_nms_withClusters)){
filtered_d897_nms_domains_withClusters[[i]] = kmeans_nms_domains_models[[i]]$cluster
}
#########################################################
### E) single-view heatmaps (not analysis)
#########################################################
nms_heatmaps = vector("list", 11)
for(i in 1:length(kmeans_nms_domains_models)){
only_nms_domains_centers_data = kmeans_nms_domains_models[[i]]$centers
# Order the matrix rows in ascending order
# (http://stackoverflow.com/questions/10508352/how-to-sort-a-matrix-by-all-columns)
ordered_heat_map_data = only_nms_domains_centers_data[do.call(order, lapply(1:NCOL(only_nms_domains_centers_data), function(i) only_nms_domains_centers_data[, i])),]
# Name the matrix rows with its new number representing its ascending order
rownames(ordered_heat_map_data) = 1:nrow(ordered_heat_map_data)
# melt the data matrix to be  able to use it with ggplot
melted_heat_map_data = melt(ordered_heat_map_data)
# rename the columns of the melted matrix (Var1 -> NMS domains, Var2 -> Clusters)
names(melted_heat_map_data) = c("Var1" = "NMS domains", "Var2"= "Clusters", "value" = "value")
# We draw the specific NMS heatmap for the current set of clusters
nms_heatmaps[[i]] = ggplot(data = melted_heat_map_data, aes(x="Clusters", y="NMS domains", fill=value)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient(low = "white", high = "red")
}
nms_heatmaps[[3]]
View(melted_heat_map_data)
nms_heatmaps[[3]]
nms_heatmaps[[3]]
View(melted_heat_map_data)
rm(list=ls())
#########################################################
### A) Installing and loading required packages
#########################################################
if (!require("gplots")) {
install.packages("gplots", dependencies = TRUE)
library(gplots)
}
if (!require("RColorBrewer")) {
install.packages("RColorBrewer", dependencies = TRUE)
library(RColorBrewer)
}
if (!require("cluster")){
install.packages("cluster", dependencies = TRUE)
library(cluster)
}
#No-use i think
if (!require("tidyverse")){
install.packages("tidyverse", dependencies = TRUE)
library(tidyverse)
}
if (!require("reshape2")){
install.packages("reshape2", dependencies = TRUE)
library(reshape2)
}
#########################################################
### B) Reading in data and preparing it for clustering
#########################################################
d897 <- read.csv("analysis/clustering/kmeans/data/897_motor_nms.csv", comment.char="#")
# Filtering the data frame
d897_nms_domains9 = d897[68:76]
# TODO: SCOPA-MOTOR domains too
#########################################################
### C) Using the clustering algorithm
#########################################################
# first we create two lists of NULL values with size = 11 that represent 11 possible cluster models
# with raising k values
kmeans_nms_domains_models = vector("list", 11)
# Execute the kmeans algorithm 11 times (k = 2,3,4,...,12) with the NMS features
for(i in 1:length(kmeans_nms_domains_models)){
kmeans_nms_domains_models[[i]] = kmeans(x = d897_nms_domains9, centers = i+1, iter.max = 30, nstart = 20)
}
#########################################################
### D) Preparing clustered data por single-view analysis
#########################################################
# First we select the columns that interest us for the single-view analysis
# 68:76 -> 9 Non-motor domains in order
# 3:7   -> country, age, sex, pdonset, durat_pd
# 82    -> cisitot
# 33    -> hy
# 81    -> scmtot
filtered_d897_nms_domains = d897[c(68:76, 3:7, 82, 33, 81)]
#Then we create a new list where each of its items is a completed data frame with clusters
filtered_d897_nms_withClusters = vector("list", 11)
# NMS domains: Add its assigned clusters to each data frame's row
for(i in 1:length(filtered_d897_nms_withClusters)){
filtered_d897_nms_domains_withClusters[[i]] = kmeans_nms_domains_models[[i]]$cluster
}
#########################################################
### E) single-view heatmaps (not analysis)
#########################################################
nms_heatmaps = vector("list", 11)
for(i in 1:length(kmeans_nms_domains_models)){
only_nms_domains_centers_data = kmeans_nms_domains_models[[i]]$centers
# Order the matrix rows in ascending order
# (http://stackoverflow.com/questions/10508352/how-to-sort-a-matrix-by-all-columns)
ordered_heat_map_data = only_nms_domains_centers_data[do.call(order, lapply(1:NCOL(only_nms_domains_centers_data), function(i) only_nms_domains_centers_data[, i])),]
# Name the matrix rows with its new number representing its ascending order
rownames(ordered_heat_map_data) = 1:nrow(ordered_heat_map_data)
# melt the data matrix to be  able to use it with ggplot
melted_heat_map_data = melt(ordered_heat_map_data)
# rename the columns of the melted matrix (Var1 -> NMS domains, Var2 -> Clusters)
names(melted_heat_map_data) = c("Var1" = "NMS_dom", "Var2"= "Clusters", "value" = "value")
# We draw the specific NMS heatmap for the current set of clusters
nms_heatmaps[[i]] = ggplot(data = melted_heat_map_data, aes(x = Clusters, y = NMS_dom, fill=value)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient(low = "white", high = "red")
}
View(melted_heat_map_data)
nms_heatmaps[[3]]
nms_heatmaps[[2]]
rm(list=ls())
#########################################################
### A) Installing and loading required packages
#########################################################
if (!require("gplots")) {
install.packages("gplots", dependencies = TRUE)
library(gplots)
}
if (!require("RColorBrewer")) {
install.packages("RColorBrewer", dependencies = TRUE)
library(RColorBrewer)
}
if (!require("cluster")){
install.packages("cluster", dependencies = TRUE)
library(cluster)
}
#No-use i think
if (!require("tidyverse")){
install.packages("tidyverse", dependencies = TRUE)
library(tidyverse)
}
if (!require("reshape2")){
install.packages("reshape2", dependencies = TRUE)
library(reshape2)
}
#########################################################
### B) Reading in data and preparing it for clustering
#########################################################
d897 <- read.csv("analysis/clustering/kmeans/data/897_motor_nms.csv", comment.char="#")
# Filtering the data frame
d897_nms_domains9 = d897[68:76]
# TODO: SCOPA-MOTOR domains too
#########################################################
### C) Using the clustering algorithm
#########################################################
# first we create two lists of NULL values with size = 11 that represent 11 possible cluster models
# with raising k values
kmeans_nms_domains_models = vector("list", 11)
# Execute the kmeans algorithm 11 times (k = 2,3,4,...,12) with the NMS features
for(i in 1:length(kmeans_nms_domains_models)){
kmeans_nms_domains_models[[i]] = kmeans(x = d897_nms_domains9, centers = i+1, iter.max = 30, nstart = 20)
}
#########################################################
### D) Preparing clustered data por single-view analysis
#########################################################
# First we select the columns that interest us for the single-view analysis
# 68:76 -> 9 Non-motor domains in order
# 3:7   -> country, age, sex, pdonset, durat_pd
# 82    -> cisitot
# 33    -> hy
# 81    -> scmtot
filtered_d897_nms_domains = d897[c(68:76, 3:7, 82, 33, 81)]
#Then we create a new list where each of its items is a completed data frame with clusters
filtered_d897_nms_withClusters = vector("list", 11)
# NMS domains: Add its assigned clusters to each data frame's row
for(i in 1:length(filtered_d897_nms_withClusters)){
filtered_d897_nms_domains_withClusters[[i]] = kmeans_nms_domains_models[[i]]$cluster
}
#########################################################
### E) single-view heatmaps (not analysis)
#########################################################
nms_heatmaps = vector("list", 11)
for(i in 1:length(kmeans_nms_domains_models)){
only_nms_domains_centers_data = kmeans_nms_domains_models[[i]]$centers
# Order the matrix rows in ascending order
# (http://stackoverflow.com/questions/10508352/how-to-sort-a-matrix-by-all-columns)
ordered_heat_map_data = only_nms_domains_centers_data[do.call(order, lapply(1:NCOL(only_nms_domains_centers_data), function(i) only_nms_domains_centers_data[, i])),]
# Name the matrix rows with its new number representing its ascending order
rownames(ordered_heat_map_data) = 1:nrow(ordered_heat_map_data)
# melt the data matrix to be  able to use it with ggplot
melted_heat_map_data = melt(ordered_heat_map_data)
# rename the columns of the melted matrix (Var1 -> NMS domains, Var2 -> Clusters)
names(melted_heat_map_data) = c("Var1" = "Clusters", "Var2"= "NMS_domains", "value" = "value")
# We draw the specific NMS heatmap for the current set of clusters
nms_heatmaps[[i]] = ggplot(data = melted_heat_map_data, aes(x = Clusters, y = NMS_domains, fill=value)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient(low = "white", high = "red")
}
rm(list=ls())
#########################################################
### A) Installing and loading required packages
#########################################################
if (!require("gplots")) {
install.packages("gplots", dependencies = TRUE)
library(gplots)
}
if (!require("RColorBrewer")) {
install.packages("RColorBrewer", dependencies = TRUE)
library(RColorBrewer)
}
if (!require("cluster")){
install.packages("cluster", dependencies = TRUE)
library(cluster)
}
#No-use i think
if (!require("tidyverse")){
install.packages("tidyverse", dependencies = TRUE)
library(tidyverse)
}
if (!require("reshape2")){
install.packages("reshape2", dependencies = TRUE)
library(reshape2)
}
#########################################################
### B) Reading in data and preparing it for clustering
#########################################################
d897 <- read.csv("analysis/clustering/kmeans/data/897_motor_nms.csv", comment.char="#")
# Filtering the data frame
d897_nms_domains9 = d897[68:76]
# TODO: SCOPA-MOTOR domains too
#########################################################
### C) Using the clustering algorithm
#########################################################
# first we create two lists of NULL values with size = 11 that represent 11 possible cluster models
# with raising k values
kmeans_nms_domains_models = vector("list", 11)
# Execute the kmeans algorithm 11 times (k = 2,3,4,...,12) with the NMS features
for(i in 1:length(kmeans_nms_domains_models)){
kmeans_nms_domains_models[[i]] = kmeans(x = d897_nms_domains9, centers = i+1, iter.max = 30, nstart = 20)
}
#########################################################
### D) Preparing clustered data por single-view analysis
#########################################################
# First we select the columns that interest us for the single-view analysis
# 68:76 -> 9 Non-motor domains in order
# 3:7   -> country, age, sex, pdonset, durat_pd
# 82    -> cisitot
# 33    -> hy
# 81    -> scmtot
filtered_d897_nms_domains = d897[c(68:76, 3:7, 82, 33, 81)]
#Then we create a new list where each of its items is a completed data frame with clusters
filtered_d897_nms_domains_withClusters = vector("list", 11)
# NMS domains: Add its assigned clusters to each data frame's row
for(i in 1:length(filtered_d897_nms_withClusters)){
filtered_d897_nms_domains_withClusters[[i]] = kmeans_nms_domains_models[[i]]$cluster
}
#########################################################
### E) single-view heatmaps (not analysis)
#########################################################
nms_heatmaps = vector("list", 11)
for(i in 1:length(kmeans_nms_domains_models)){
only_nms_domains_centers_data = kmeans_nms_domains_models[[i]]$centers
# Order the matrix rows in ascending order
# (http://stackoverflow.com/questions/10508352/how-to-sort-a-matrix-by-all-columns)
ordered_heat_map_data = only_nms_domains_centers_data[do.call(order, lapply(1:NCOL(only_nms_domains_centers_data), function(i) only_nms_domains_centers_data[, i])),]
# Name the matrix rows with its new number representing its ascending order
rownames(ordered_heat_map_data) = 1:nrow(ordered_heat_map_data)
# melt the data matrix to be  able to use it with ggplot
melted_heat_map_data = melt(ordered_heat_map_data)
# rename the columns of the melted matrix (Var1 -> NMS domains, Var2 -> Clusters)
names(melted_heat_map_data) = c("Var1" = "Clusters", "Var2"= "NMS_domains", "value" = "value")
# We draw the specific NMS heatmap for the current set of clusters
nms_heatmaps[[i]] = ggplot(data = melted_heat_map_data, aes(x = Clusters, y = NMS_domains, fill=value)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient(low = "white", high = "red")
}
rm(list=ls())
#########################################################
### A) Installing and loading required packages
#########################################################
if (!require("gplots")) {
install.packages("gplots", dependencies = TRUE)
library(gplots)
}
if (!require("RColorBrewer")) {
install.packages("RColorBrewer", dependencies = TRUE)
library(RColorBrewer)
}
if (!require("cluster")){
install.packages("cluster", dependencies = TRUE)
library(cluster)
}
#No-use i think
if (!require("tidyverse")){
install.packages("tidyverse", dependencies = TRUE)
library(tidyverse)
}
if (!require("reshape2")){
install.packages("reshape2", dependencies = TRUE)
library(reshape2)
}
#########################################################
### B) Reading in data and preparing it for clustering
#########################################################
d897 <- read.csv("analysis/clustering/kmeans/data/897_motor_nms.csv", comment.char="#")
# Filtering the data frame
d897_nms_domains9 = d897[68:76]
# TODO: SCOPA-MOTOR domains too
#########################################################
### C) Using the clustering algorithm
#########################################################
# first we create two lists of NULL values with size = 11 that represent 11 possible cluster models
# with raising k values
kmeans_nms_domains_models = vector("list", 11)
# Execute the kmeans algorithm 11 times (k = 2,3,4,...,12) with the NMS features
for(i in 1:length(kmeans_nms_domains_models)){
kmeans_nms_domains_models[[i]] = kmeans(x = d897_nms_domains9, centers = i+1, iter.max = 30, nstart = 20)
}
#########################################################
### D) Preparing clustered data por single-view analysis
#########################################################
# First we select the columns that interest us for the single-view analysis
# 68:76 -> 9 Non-motor domains in order
# 3:7   -> country, age, sex, pdonset, durat_pd
# 82    -> cisitot
# 33    -> hy
# 81    -> scmtot
filtered_d897_nms_domains = d897[c(68:76, 3:7, 82, 33, 81)]
#Then we create a new list where each of its items is a completed data frame with clusters
filtered_d897_nms_domains_withClusters = vector("list", 11)
# NMS domains: Add its assigned clusters to each data frame's row
for(i in 1:length(filtered_d897_nms_domains_withClusters)){
filtered_d897_nms_domains_withClusters[[i]] = kmeans_nms_domains_models[[i]]$cluster
}
#########################################################
### E) single-view heatmaps (not analysis)
#########################################################
nms_heatmaps = vector("list", 11)
for(i in 1:length(kmeans_nms_domains_models)){
only_nms_domains_centers_data = kmeans_nms_domains_models[[i]]$centers
# Order the matrix rows in ascending order
# (http://stackoverflow.com/questions/10508352/how-to-sort-a-matrix-by-all-columns)
ordered_heat_map_data = only_nms_domains_centers_data[do.call(order, lapply(1:NCOL(only_nms_domains_centers_data), function(i) only_nms_domains_centers_data[, i])),]
# Name the matrix rows with its new number representing its ascending order
rownames(ordered_heat_map_data) = 1:nrow(ordered_heat_map_data)
# melt the data matrix to be  able to use it with ggplot
melted_heat_map_data = melt(ordered_heat_map_data)
# rename the columns of the melted matrix (Var1 -> NMS domains, Var2 -> Clusters)
names(melted_heat_map_data) = c("Var1" = "Clusters", "Var2"= "NMS_domains", "value" = "value")
# We draw the specific NMS heatmap for the current set of clusters
nms_heatmaps[[i]] = ggplot(data = melted_heat_map_data, aes(x = Clusters, y = NMS_domains, fill=value)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient(low = "white", high = "red")
}
nms_heatmaps[[2]]
rm(list = ls())
library(readr)
X897_motor_nms <- read_csv("~/Git Projects/parkinson-test/data/original/NA values filtered/897_motor_nms.csv")
View(X897_motor_nms)
male_x897 = X897_motor_nms[sex==1]
male_x897 = X897_motor_nms["sex"==1]
male_x897 = X897_motor_nms[sex=1]
male_x897 = X897_motor_nms[X897_motor_nms$sex==1]
males_x897 = X897_motor_nms[X897_motor_nms$sex==1]
males_x897 = X897_motor_nms[X897_motor_nms$sex==1 ,]
males_x897 = X897_motor_nms[X897_motor_nms$sex==0 ,]
females_x897 = X897_motor_nms[X897_motor_nms$sex==1 ,]
write.csv(x = males_x897, file = "/data/original/NA values filtered/gender_comparison/897_males_motor_nms.csv")
write.csv(x = males_x897, file = "data/original/NA values filtered/gender_comparison/897_males_motor_nms.csv")
write.csv(x = females_x897, file = "data/original/NA values filtered/gender_comparison/897_females_motor_nms.csv")
rm(list = ls())
library(readr)
X781_treatment_motor_nms <- read_csv("~/Git Projects/parkinson-test/data/original/NA values filtered/781_treatment_motor_nms.csv")
View(X781_treatment_motor_nms)
males_x781 = X781_treatment_motor_nms[X781_treatment_motor_nms$sex==1 ,]
males_x781 = X781_treatment_motor_nms[X781_treatment_motor_nms$sex==0 ,]
females_x781 = X781_treatment_motor_nms[X781_treatment_motor_nms$sex==1 ,]
write.csv(x = females_x781, file = "data/original/NA values filtered/gender_comparison/781_females_motor_nms.csv")
write.csv(x = males_x781, file = "data/original/NA values filtered/gender_comparison/781_males_motor_nms.csv")
library(psych)
describe(females_x781)
fem_ds = describe(females_x781)
View(fem_ds)
write.csv(x = fem_ds, file = "analysis/summary_stats/781_female_sumstats.csv")
male_ds = describe(males_x781)
write.csv(x = f_ds, file = "analysis/summary_stats/781_male_sumstats.csv")
write.csv(x = male_ds, file = "analysis/summary_stats/781_male_sumstats.csv")
rm(list=ls())
library(readr)
X897_motor_nms <- read_csv("~/Git Projects/parkinson-test/analysis/clustering/kmeans/data/897_motor_nms.csv")
View(X897_motor_nms)
x897_ds = describe(X897_motor_nms)
x897_male_ds = describe(X897_motor_nms[X897_motor_nms$sex==0])
x897_male_ds = describe(X897_motor_nms[X897_motor_nms$sex==0 ,])
x897_female_ds = describe(X897_motor_nms[X897_motor_nms$sex==1 ,])
library(readr)
X781_treatment_motor_nms <- read_csv("~/Git Projects/parkinson-test/data/original/NA values filtered/781_treatment_motor_nms.csv")
View(X781_treatment_motor_nms)
x781_ds = describe(X781_treatment_motor_nms)
write.csv(x = x781_ds, file = "analysis/summary_stats/781_sumstats.csv")
write.csv(x = x897_ds, file = "analysis/summary_stats/897_sumstats.csv")
write.csv(x = x897_male_ds, file = "analysis/summary_stats/897_male_sumstats.csv")
write.csv(x = x897_female_ds, file = "analysis/summary_stats/897_female_sumstats.csv")
rm(list=ls())
library(readr)
X897_motor_nms <- read_csv("~/Git Projects/parkinson-test/data/original/NA values filtered/897_motor_nms.csv")
View(X897_motor_nms)
# Filtering the data frame
d897_nms30 = d897[38:67]
d897 = X897_motor_nms
# Filtering the data frame
d897_nms30 = d897[38:67]
library(readr)
X781_treatment_motor_nms <- read_csv("~/Git Projects/parkinson-test/data/original/NA values filtered/781_treatment_motor_nms.csv")
View(X781_treatment_motor_nms)
d897_motor25 = d897[8:32]
d897_male = d897[d897$sex == 0]
d897_male = d897[d897$sex == 0 ,]
d897_female = d897[d897$sex == 1 ,]
d897_male_motor25 = d897_male[8:32]
d897_male_nms30 = d897_male[38:67]
write.csv( x = d897_motor25, file = "analysis/d897_motor25.csv")
write.csv( x = d897_nms30, file = "analysis/d897_nms30.csv")
write.csv( x = d897_male_nms30, file = "analysis/d897_male_nms30.csv")
write.csv( x = d897_male_motor25, file = "analysis/d897_male_motor25.csv")
d897_female_nms30 = d897_female[38:67]
d897_female_motor25 = d897_female[8:32]
write.csv( x = d897_female_motor25, file = "analysis/d897_female_motor25.csv")
write.csv( x = d897_female_nms30, file = "analysis/d897_female_nms30.csv")
rm(list=ls())
library(readr)
X897_motor_nms <- read_csv("~/Git Projects/parkinson-test/analysis/clustering/kmeans/data/897_motor_nms.csv")
View(X897_motor_nms)
d897 = X897_motor_nms
rm(X897_motor_nms)
d897_male = d897[d897$sex == 0 ,]
d897_female = d897[d897$sex == 1 ,]
d897_female_motor_nms55 = d897_female[8:32, 38:67]
d897_male_motor_nms55 = d897_female[8:32, 38:67]
d897_motor_nms55 = d897[8:32, 38:67]
write.csv( x = d897_female_motor_nms55, file = "analysis/d897_female_motor_nms55.csv")
write.csv( x = d897_male_motor_nms55, file = "analysis/d897_male_motor_nms55.csv")
write.csv( x = d897_motor_nms55, file = "analysis/d897_motor_nms55.csv")
d897_male_motor_nms55 = d897_female[c(8:32, 38:67)]
d897_male_motor_nms55 = d897_male[c(8:32, 38:67)]
d897_female_motor_nms55 = d897_female[c(8:32, 38:67)]
d897_motor_nms55 = d897[c(8:32, 38:67)]
write.csv( x = d897_female_motor_nms55, file = "analysis/d897_female_motor_nms55.csv")
write.csv( x = d897_motor_nms55, file = "analysis/d897_motor_nms55.csv")
write.csv( x = d897_male_motor_nms55, file = "analysis/d897_male_motor_nms55.csv")
rm(list=ls())
library(readr)
X897_motor_nms <- read_csv("~/Git Projects/parkinson-test/analysis/clustering/kmeans/data/897_motor_nms.csv")
View(X897_motor_nms)
d897 = X897_motor_nms
rm(X897_motor_nms)
d897_nms30 =d897[38:67]
d897_nms30 * 0.5
View(d897_nms30)
d897_nms30_filt = d897_nms30 * 0.5
View(d897_nms30_filt)
d897_nms30_filt = d897_nms30 / 2
View(d897_nms30_filt)
install.packages(arules)
library(arules)
install.packages("infotheo")
library(infotheo)
d897_nms30_filt = discretize(d897_nms30, disc="equalwidth", nbins = 6)
View(d897_nms30_filt)
test= c("NA", 3, 6)
discretize(test, disc="equalwidth", nbins = 2)
test= c("LLLLLLL", 3, 6)
discretize(test, disc="equalwidth", nbins = 2)
for(rowi in d897_nms30){
for(ele in rowi){
print(ele)
}
}
View(d897_nms30)
write.csv( x = d897_nms30, file = "analysis/d897_nms30.csv")
rm(list =ls())
library(foreign)
d897_nms30_s6 = read.arff("analysis/d897_nms30_s6.arff")
View(d897_nms30_s6)
d897_male_nms30_s6 = d897_nms30_s6[d897_nms30_s6$sex == 0 ,]
d897_female_nms30_s6 = d897_nms30_s6[d897_nms30_s6$sex == 1 ,]
library(readr)
X897_motor_nms <- read_csv("~/Git Projects/parkinson-test/analysis/clustering/kmeans/data/897_motor_nms.csv")
View(X897_motor_nms)
d897_sex = X897_motor_nms[, c("sex", "nident")]
merge(d897_sex, d897_nms30_s6)
d897_nms30_s6_merged = merge(d897_sex, d897_nms30_s6)
merge(d897_sex, d897_nms30_s6)
d897_nms30_s6$nident = d897_sex$nident
d897_nms30_s6$sex = d897_sex$sex
View(d897_nms30_s6)
d897_male_nms30_s6 = d897_nms30_s6[d897_nms30_s6$sex == 0 ,]
d897_female_nms30_s6 = d897_nms30_s6[d897_nms30_s6$sex == 1 ,]
write.arff(d897_female_nms30_s6, file="analysis/d897_female_nms30_s6.arff")
write.csv(d897_female_nms30_s6, file="analysis/d897_female_nms30_s6.csv")
View(d897_female_nms30_s6)
